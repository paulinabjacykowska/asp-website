# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

"Node Interface"
interface Node {
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

type Directory implements Node {
    absolutePath: String!
    accessTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atimeMs: Float!
    base: String!
    birthTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    birthtime: Date @deprecated(reason : "Use `birthTime` instead")
    birthtimeMs: Float @deprecated(reason : "Use `birthTime` instead")
    blksize: Int
    blocks: Int
    changeTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    children: [Node!]!
    ctime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    ctimeMs: Float!
    dev: Int!
    dir: String!
    ext: String!
    extension: String!
    gid: Int!
    id: ID!
    ino: Float!
    internal: Internal!
    mode: Int!
    modifiedTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtimeMs: Float!
    name: String!
    nlink: Int!
    parent: Node
    prettySize: String!
    rdev: Int!
    relativeDirectory: String!
    relativePath: String!
    root: String!
    size: Int!
    sourceInstanceName: String!
    uid: Int!
}

type DirectoryConnection {
    distinct(field: DirectoryFieldsEnum!): [String!]!
    edges: [DirectoryEdge!]!
    group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
    max(field: DirectoryFieldsEnum!): Float
    min(field: DirectoryFieldsEnum!): Float
    nodes: [Directory!]!
    pageInfo: PageInfo!
    sum(field: DirectoryFieldsEnum!): Float
    totalCount: Int!
}

type DirectoryEdge {
    next: Directory
    node: Directory!
    previous: Directory
}

type DirectoryGroupConnection {
    edges: [DirectoryEdge!]!
    field: String!
    fieldValue: String
    nodes: [Directory!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type File implements Node {
    absolutePath: String!
    accessTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atimeMs: Float!
    base: String!
    birthTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    birthtime: Date @deprecated(reason : "Use `birthTime` instead")
    birthtimeMs: Float @deprecated(reason : "Use `birthTime` instead")
    blksize: Int
    blocks: Int
    changeTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    "Returns the first child node of type ImageSharp or null if there are no children of given type on this node"
    childImageSharp: ImageSharp
    children: [Node!]!
    "Returns all children nodes filtered by type ImageSharp"
    childrenImageSharp: [ImageSharp]
    ctime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    ctimeMs: Float!
    dev: Int!
    dir: String!
    ext: String!
    extension: String!
    gid: Int!
    id: ID!
    ino: Float!
    internal: Internal!
    mode: Int!
    modifiedTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtimeMs: Float!
    name: String!
    nlink: Int!
    parent: Node
    prettySize: String!
    "Copy file to static directory and return public url to it"
    publicURL: String
    rdev: Int!
    relativeDirectory: String!
    relativePath: String!
    root: String!
    size: Int!
    sourceInstanceName: String!
    uid: Int!
}

type FileConnection {
    distinct(field: FileFieldsEnum!): [String!]!
    edges: [FileEdge!]!
    group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
    max(field: FileFieldsEnum!): Float
    min(field: FileFieldsEnum!): Float
    nodes: [File!]!
    pageInfo: PageInfo!
    sum(field: FileFieldsEnum!): Float
    totalCount: Int!
}

type FileEdge {
    next: File
    node: File!
    previous: File
}

type FileGroupConnection {
    edges: [FileEdge!]!
    field: String!
    fieldValue: String
    nodes: [File!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharp implements Node {
    children: [Node!]!
    fixed(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpFixed
    fluid(
        background: String = "rgba(0,0,0,1)",
        base64Width: Int,
        cropFocus: ImageCropFocus = ATTENTION,
        duotone: DuotoneGradient,
        fit: ImageFit = COVER,
        grayscale: Boolean = false,
        jpegProgressive: Boolean = true,
        jpegQuality: Int,
        maxHeight: Int,
        maxWidth: Int,
        pngCompressionSpeed: Int = 4,
        pngQuality: Int,
        quality: Int,
        rotate: Int = 0,
        sizes: String = "",
        "A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]"
        srcSetBreakpoints: [Int] = [],
        toFormat: ImageFormat = AUTO,
        toFormatBase64: ImageFormat = AUTO,
        traceSVG: Potrace,
        trim: Float = 0.0,
        webpQuality: Int
    ): ImageSharpFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Options to pass to sharp when generating AVIF images."
        avifOptions: AVIFOptions,
        "Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        "Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this"
        blurredOptions: BlurredOptions,
        """

        Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        """

        The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
        The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
        not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
        both PNG and JPG is not supported and will be ignored.
        """
        formats: [ImageFormat],
        """

        The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
        The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
        matching the aspect ratio of the source image.
        """
        height: Int,
        "Options to pass to sharp when generating JPG images."
        jpgOptions: JPGOptions,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: ImageLayout = CONSTRAINED,
        """

        A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
        and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        TRACED_SVG: a low-resolution traced SVG of the image.
        NONE: no placeholder. Set "background" to use a fixed background color.
        """
        placeholder: ImagePlaceholder,
        "Options to pass to sharp when generating PNG images."
        pngOptions: PNGOptions,
        "The default quality. This is overridden by any format-specific options"
        quality: Int,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download.
        You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
        does not actually span the full width of the screen, in which case you should pass the correct size here.
        """
        sizes: String,
        "Options for traced placeholder SVGs. You also should set placeholder to \"TRACED_SVG\"."
        tracedSVGOptions: Potrace,
        "Options to pass to sharp to control cropping and other image manipulations."
        transformOptions: TransformOptions,
        "Options to pass to sharp when generating WebP images."
        webpOptions: WebPOptions,
        """

        The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
        Ignored if layout = FLUID.
        """
        width: Int
    ): JSON!
    id: ID!
    internal: Internal!
    original: ImageSharpOriginal
    parent: Node
    resize(background: String = "rgba(0,0,0,1)", base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = AUTO, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpResize
}

type ImageSharpConnection {
    distinct(field: ImageSharpFieldsEnum!): [String!]!
    edges: [ImageSharpEdge!]!
    group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
    max(field: ImageSharpFieldsEnum!): Float
    min(field: ImageSharpFieldsEnum!): Float
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    sum(field: ImageSharpFieldsEnum!): Float
    totalCount: Int!
}

type ImageSharpEdge {
    next: ImageSharp
    node: ImageSharp!
    previous: ImageSharp
}

type ImageSharpFixed {
    aspectRatio: Float
    base64: String
    height: Float!
    originalName: String
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
    width: Float!
}

type ImageSharpFluid {
    aspectRatio: Float!
    base64: String
    originalImg: String
    originalName: String
    presentationHeight: Int!
    presentationWidth: Int!
    sizes: String!
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
}

type ImageSharpGroupConnection {
    edges: [ImageSharpEdge!]!
    field: String!
    fieldValue: String
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharpOriginal {
    height: Float
    src: String
    width: Float
}

type ImageSharpResize {
    aspectRatio: Float
    height: Int
    originalName: String
    src: String
    tracedSVG: String
    width: Int
}

type Internal {
    content: String
    contentDigest: String!
    description: String
    fieldOwners: [String]
    ignoreType: Boolean
    mediaType: String
    owner: String!
    type: String!
}

type PageInfo {
    currentPage: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    itemCount: Int!
    pageCount: Int!
    perPage: Int
    totalCount: Int!
}

type Query {
    allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: DirectorySortInput): DirectoryConnection!
    allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: FileSortInput): FileConnection!
    allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: ImageSharpSortInput): ImageSharpConnection!
    allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: SiteSortInput): SiteConnection!
    allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: SiteBuildMetadataSortInput): SiteBuildMetadataConnection!
    allSiteFunction(filter: SiteFunctionFilterInput, limit: Int, skip: Int, sort: SiteFunctionSortInput): SiteFunctionConnection!
    allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: SitePageSortInput): SitePageConnection!
    allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: SitePluginSortInput): SitePluginConnection!
    allStrapiAboutUs(filter: StrapiAboutUsFilterInput, limit: Int, skip: Int, sort: StrapiAboutUsSortInput): StrapiAboutUsConnection!
    allStrapiBestDegrees(filter: StrapiBestDegreesFilterInput, limit: Int, skip: Int, sort: StrapiBestDegreesSortInput): StrapiBestDegreesConnection!
    allStrapiDegree(filter: StrapiDegreeFilterInput, limit: Int, skip: Int, sort: StrapiDegreeSortInput): StrapiDegreeConnection!
    allStrapiDepartment(filter: StrapiDepartmentFilterInput, limit: Int, skip: Int, sort: StrapiDepartmentSortInput): StrapiDepartmentConnection!
    allStrapiExhibit(filter: StrapiExhibitFilterInput, limit: Int, skip: Int, sort: StrapiExhibitSortInput): StrapiExhibitConnection!
    allStrapiFieldOfStudy(filter: StrapiFieldOfStudyFilterInput, limit: Int, skip: Int, sort: StrapiFieldOfStudySortInput): StrapiFieldOfStudyConnection!
    allStrapiFooter(filter: StrapiFooterFilterInput, limit: Int, skip: Int, sort: StrapiFooterSortInput): StrapiFooterConnection!
    allStrapiHome(filter: StrapiHomeFilterInput, limit: Int, skip: Int, sort: StrapiHomeSortInput): StrapiHomeConnection!
    directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
    file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, childImageSharp: ImageSharpFilterInput, children: NodeFilterListInput, childrenImageSharp: ImageSharpFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): File
    imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: JSONQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput): ImageSharp
    site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: IntQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput): Site
    siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
    siteFunction(absoluteCompiledFilePath: StringQueryOperatorInput, children: NodeFilterListInput, functionRoute: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, matchPath: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, parent: NodeFilterInput, pluginName: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput): SiteFunction
    sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, context: SitePageContextFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, isCreatedByStatefulCreatePages: BooleanQueryOperatorInput, matchPath: StringQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput, pluginCreatorId: StringQueryOperatorInput): SitePage
    sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: SitePluginPackageJsonFilterInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: SitePluginPluginOptionsFilterInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
    strapiAboutUs(children: NodeFilterListInput, created_at: DateQueryOperatorInput, history_text_field: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, locale: StringQueryOperatorInput, parent: NodeFilterInput, strapiId: IntQueryOperatorInput, title: StringQueryOperatorInput, updated_at: DateQueryOperatorInput): StrapiAboutUs
    strapiBestDegrees(children: NodeFilterListInput, created_at: DateQueryOperatorInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, locale: StringQueryOperatorInput, parent: NodeFilterInput, strapiId: IntQueryOperatorInput, title: StringQueryOperatorInput, updated_at: DateQueryOperatorInput): StrapiBestDegrees
    strapiDegree(author: StringQueryOperatorInput, best_degree: BooleanQueryOperatorInput, children: NodeFilterListInput, contacts: StrapiDegreeContactsFilterListInput, created_at: DateQueryOperatorInput, description: StringQueryOperatorInput, field_of_study: StrapiDegreeField_of_studyFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, locale: StringQueryOperatorInput, parent: NodeFilterInput, promoters: StrapiDegreePromotersFilterListInput, published_at: DateQueryOperatorInput, strapiId: IntQueryOperatorInput, title: StringQueryOperatorInput, updated_at: DateQueryOperatorInput, year: IntQueryOperatorInput): StrapiDegree
    strapiDepartment(children: NodeFilterListInput, created_at: DateQueryOperatorInput, description: StringQueryOperatorInput, icon: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, locale: StringQueryOperatorInput, name: StringQueryOperatorInput, parent: NodeFilterInput, published_at: DateQueryOperatorInput, strapiId: IntQueryOperatorInput, theme: StringQueryOperatorInput, updated_at: DateQueryOperatorInput): StrapiDepartment
    strapiExhibit(children: NodeFilterListInput, created_at: DateQueryOperatorInput, description: StringQueryOperatorInput, end_date: DateQueryOperatorInput, exhibit_type: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, links: StringQueryOperatorInput, locale: StringQueryOperatorInput, parent: NodeFilterInput, published_at: DateQueryOperatorInput, start_date: DateQueryOperatorInput, strapiId: IntQueryOperatorInput, title: StringQueryOperatorInput, updated_at: DateQueryOperatorInput): StrapiExhibit
    strapiFieldOfStudy(children: NodeFilterListInput, created_at: DateQueryOperatorInput, department: StrapiFieldOfStudyDepartmentFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, locale: StringQueryOperatorInput, name: StringQueryOperatorInput, parent: NodeFilterInput, strapiId: IntQueryOperatorInput, updated_at: DateQueryOperatorInput): StrapiFieldOfStudy
    strapiFooter(children: NodeFilterListInput, contact: StringQueryOperatorInput, created_at: DateQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, locale: StringQueryOperatorInput, more_info: StringQueryOperatorInput, more_info_links: StringQueryOperatorInput, parent: NodeFilterInput, phone: StringQueryOperatorInput, school_location: StringQueryOperatorInput, school_name: StringQueryOperatorInput, strapiId: IntQueryOperatorInput, updated_at: DateQueryOperatorInput): StrapiFooter
    strapiHome(children: NodeFilterListInput, content_banner_text: StringQueryOperatorInput, created_at: DateQueryOperatorInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, locale: StringQueryOperatorInput, parent: NodeFilterInput, strapiId: IntQueryOperatorInput, title: StringQueryOperatorInput, title_banner_text: StringQueryOperatorInput, updated_at: DateQueryOperatorInput): StrapiHome
}

type Site implements Node {
    buildTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    children: [Node!]!
    host: String
    id: ID!
    internal: Internal!
    parent: Node
    pathPrefix: String
    polyfill: Boolean
    port: Int
    siteMetadata: SiteSiteMetadata
}

type SiteBuildMetadata implements Node {
    buildTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

type SiteBuildMetadataConnection {
    distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
    edges: [SiteBuildMetadataEdge!]!
    group(field: SiteBuildMetadataFieldsEnum!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
    max(field: SiteBuildMetadataFieldsEnum!): Float
    min(field: SiteBuildMetadataFieldsEnum!): Float
    nodes: [SiteBuildMetadata!]!
    pageInfo: PageInfo!
    sum(field: SiteBuildMetadataFieldsEnum!): Float
    totalCount: Int!
}

type SiteBuildMetadataEdge {
    next: SiteBuildMetadata
    node: SiteBuildMetadata!
    previous: SiteBuildMetadata
}

type SiteBuildMetadataGroupConnection {
    edges: [SiteBuildMetadataEdge!]!
    field: String!
    fieldValue: String
    nodes: [SiteBuildMetadata!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteConnection {
    distinct(field: SiteFieldsEnum!): [String!]!
    edges: [SiteEdge!]!
    group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
    max(field: SiteFieldsEnum!): Float
    min(field: SiteFieldsEnum!): Float
    nodes: [Site!]!
    pageInfo: PageInfo!
    sum(field: SiteFieldsEnum!): Float
    totalCount: Int!
}

type SiteEdge {
    next: Site
    node: Site!
    previous: Site
}

type SiteFunction implements Node {
    absoluteCompiledFilePath: String!
    children: [Node!]!
    functionRoute: String!
    id: ID!
    internal: Internal!
    matchPath: String
    originalAbsoluteFilePath: String!
    originalRelativeFilePath: String!
    parent: Node
    pluginName: String!
    relativeCompiledFilePath: String!
}

type SiteFunctionConnection {
    distinct(field: SiteFunctionFieldsEnum!): [String!]!
    edges: [SiteFunctionEdge!]!
    group(field: SiteFunctionFieldsEnum!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
    max(field: SiteFunctionFieldsEnum!): Float
    min(field: SiteFunctionFieldsEnum!): Float
    nodes: [SiteFunction!]!
    pageInfo: PageInfo!
    sum(field: SiteFunctionFieldsEnum!): Float
    totalCount: Int!
}

type SiteFunctionEdge {
    next: SiteFunction
    node: SiteFunction!
    previous: SiteFunction
}

type SiteFunctionGroupConnection {
    edges: [SiteFunctionEdge!]!
    field: String!
    fieldValue: String
    nodes: [SiteFunction!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteGroupConnection {
    edges: [SiteEdge!]!
    field: String!
    fieldValue: String
    nodes: [Site!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePage implements Node {
    children: [Node!]!
    component: String!
    componentChunkName: String!
    context: SitePageContext
    id: ID!
    internal: Internal!
    internalComponentName: String!
    isCreatedByStatefulCreatePages: Boolean
    matchPath: String
    parent: Node
    path: String!
    pluginCreator: SitePlugin
    pluginCreatorId: String
}

type SitePageConnection {
    distinct(field: SitePageFieldsEnum!): [String!]!
    edges: [SitePageEdge!]!
    group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
    max(field: SitePageFieldsEnum!): Float
    min(field: SitePageFieldsEnum!): Float
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    sum(field: SitePageFieldsEnum!): Float
    totalCount: Int!
}

type SitePageContext {
    id: Int
}

type SitePageEdge {
    next: SitePage
    node: SitePage!
    previous: SitePage
}

type SitePageGroupConnection {
    edges: [SitePageEdge!]!
    field: String!
    fieldValue: String
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePlugin implements Node {
    browserAPIs: [String]
    children: [Node!]!
    id: ID!
    internal: Internal!
    name: String
    nodeAPIs: [String]
    packageJson: SitePluginPackageJson
    parent: Node
    pluginFilepath: String
    pluginOptions: SitePluginPluginOptions
    resolve: String
    ssrAPIs: [String]
    version: String
}

type SitePluginConnection {
    distinct(field: SitePluginFieldsEnum!): [String!]!
    edges: [SitePluginEdge!]!
    group(field: SitePluginFieldsEnum!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
    max(field: SitePluginFieldsEnum!): Float
    min(field: SitePluginFieldsEnum!): Float
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    sum(field: SitePluginFieldsEnum!): Float
    totalCount: Int!
}

type SitePluginEdge {
    next: SitePlugin
    node: SitePlugin!
    previous: SitePlugin
}

type SitePluginGroupConnection {
    edges: [SitePluginEdge!]!
    field: String!
    fieldValue: String
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePluginPackageJson {
    dependencies: [SitePluginPackageJsonDependencies]
    description: String
    devDependencies: [SitePluginPackageJsonDevDependencies]
    keywords: [String]
    license: String
    main: String
    name: String
    peerDependencies: [SitePluginPackageJsonPeerDependencies]
    version: String
}

type SitePluginPackageJsonDependencies {
    name: String
    version: String
}

type SitePluginPackageJsonDevDependencies {
    name: String
    version: String
}

type SitePluginPackageJsonPeerDependencies {
    name: String
    version: String
}

type SitePluginPluginOptions {
    allExtensions: Boolean
    apiURL: String
    background_color: String
    base64Width: Int
    cacheDigest: String
    cache_busting_mode: String
    crossOrigin: String
    defaultQuality: Int
    display: String
    failOnError: Boolean
    icon: String
    include_favicon: Boolean
    isTSX: Boolean
    jsxPragma: String
    legacy: Boolean
    name: String
    path: String
    pathCheck: Boolean
    queryLimit: Int
    short_name: String
    singleTypes: [String]
    start_url: String
    stripMetadata: Boolean
    theme_color: String
    theme_color_in_head: Boolean
}

type SiteSiteMetadata {
    author: String
    description: String
    siteUrl: String
    title: String
}

type StrapiAboutUs implements Node {
    children: [Node!]!
    created_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    history_text_field: String
    id: ID!
    internal: Internal!
    locale: String
    parent: Node
    strapiId: Int
    title: String
    updated_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
}

type StrapiAboutUsConnection {
    distinct(field: StrapiAboutUsFieldsEnum!): [String!]!
    edges: [StrapiAboutUsEdge!]!
    group(field: StrapiAboutUsFieldsEnum!, limit: Int, skip: Int): [StrapiAboutUsGroupConnection!]!
    max(field: StrapiAboutUsFieldsEnum!): Float
    min(field: StrapiAboutUsFieldsEnum!): Float
    nodes: [StrapiAboutUs!]!
    pageInfo: PageInfo!
    sum(field: StrapiAboutUsFieldsEnum!): Float
    totalCount: Int!
}

type StrapiAboutUsEdge {
    next: StrapiAboutUs
    node: StrapiAboutUs!
    previous: StrapiAboutUs
}

type StrapiAboutUsGroupConnection {
    edges: [StrapiAboutUsEdge!]!
    field: String!
    fieldValue: String
    nodes: [StrapiAboutUs!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type StrapiBestDegrees implements Node {
    children: [Node!]!
    created_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    description: String
    id: ID!
    internal: Internal!
    locale: String
    parent: Node
    strapiId: Int
    title: String
    updated_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
}

type StrapiBestDegreesConnection {
    distinct(field: StrapiBestDegreesFieldsEnum!): [String!]!
    edges: [StrapiBestDegreesEdge!]!
    group(field: StrapiBestDegreesFieldsEnum!, limit: Int, skip: Int): [StrapiBestDegreesGroupConnection!]!
    max(field: StrapiBestDegreesFieldsEnum!): Float
    min(field: StrapiBestDegreesFieldsEnum!): Float
    nodes: [StrapiBestDegrees!]!
    pageInfo: PageInfo!
    sum(field: StrapiBestDegreesFieldsEnum!): Float
    totalCount: Int!
}

type StrapiBestDegreesEdge {
    next: StrapiBestDegrees
    node: StrapiBestDegrees!
    previous: StrapiBestDegrees
}

type StrapiBestDegreesGroupConnection {
    edges: [StrapiBestDegreesEdge!]!
    field: String!
    fieldValue: String
    nodes: [StrapiBestDegrees!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type StrapiDegree implements Node {
    author: String
    best_degree: Boolean
    children: [Node!]!
    contacts: [StrapiDegreeContacts]
    created_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    description: String
    field_of_study: StrapiDegreeField_of_study
    id: ID!
    internal: Internal!
    locale: String
    parent: Node
    promoters: [StrapiDegreePromoters]
    published_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    strapiId: Int
    title: String
    updated_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    year: Int
}

type StrapiDegreeConnection {
    distinct(field: StrapiDegreeFieldsEnum!): [String!]!
    edges: [StrapiDegreeEdge!]!
    group(field: StrapiDegreeFieldsEnum!, limit: Int, skip: Int): [StrapiDegreeGroupConnection!]!
    max(field: StrapiDegreeFieldsEnum!): Float
    min(field: StrapiDegreeFieldsEnum!): Float
    nodes: [StrapiDegree!]!
    pageInfo: PageInfo!
    sum(field: StrapiDegreeFieldsEnum!): Float
    totalCount: Int!
}

type StrapiDegreeContacts {
    contact: String
    id: Int
}

type StrapiDegreeEdge {
    next: StrapiDegree
    node: StrapiDegree!
    previous: StrapiDegree
}

type StrapiDegreeField_of_study {
    created_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    department: Int
    id: Int
    locale: String
    name: String
    updated_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
}

type StrapiDegreeGroupConnection {
    edges: [StrapiDegreeEdge!]!
    field: String!
    fieldValue: String
    nodes: [StrapiDegree!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type StrapiDegreePromoters {
    id: Int
    promoter_name: String
    subtitle: String
    title: String
}

type StrapiDepartment implements Node {
    children: [Node!]!
    created_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    description: String
    icon: String
    id: ID!
    internal: Internal!
    locale: String
    name: String
    parent: Node
    published_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    strapiId: Int
    theme: String
    updated_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
}

type StrapiDepartmentConnection {
    distinct(field: StrapiDepartmentFieldsEnum!): [String!]!
    edges: [StrapiDepartmentEdge!]!
    group(field: StrapiDepartmentFieldsEnum!, limit: Int, skip: Int): [StrapiDepartmentGroupConnection!]!
    max(field: StrapiDepartmentFieldsEnum!): Float
    min(field: StrapiDepartmentFieldsEnum!): Float
    nodes: [StrapiDepartment!]!
    pageInfo: PageInfo!
    sum(field: StrapiDepartmentFieldsEnum!): Float
    totalCount: Int!
}

type StrapiDepartmentEdge {
    next: StrapiDepartment
    node: StrapiDepartment!
    previous: StrapiDepartment
}

type StrapiDepartmentGroupConnection {
    edges: [StrapiDepartmentEdge!]!
    field: String!
    fieldValue: String
    nodes: [StrapiDepartment!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type StrapiExhibit implements Node {
    children: [Node!]!
    created_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    description: String
    end_date(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    exhibit_type: String
    id: ID!
    internal: Internal!
    links: String
    locale: String
    parent: Node
    published_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    start_date(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    strapiId: Int
    title: String
    updated_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
}

type StrapiExhibitConnection {
    distinct(field: StrapiExhibitFieldsEnum!): [String!]!
    edges: [StrapiExhibitEdge!]!
    group(field: StrapiExhibitFieldsEnum!, limit: Int, skip: Int): [StrapiExhibitGroupConnection!]!
    max(field: StrapiExhibitFieldsEnum!): Float
    min(field: StrapiExhibitFieldsEnum!): Float
    nodes: [StrapiExhibit!]!
    pageInfo: PageInfo!
    sum(field: StrapiExhibitFieldsEnum!): Float
    totalCount: Int!
}

type StrapiExhibitEdge {
    next: StrapiExhibit
    node: StrapiExhibit!
    previous: StrapiExhibit
}

type StrapiExhibitGroupConnection {
    edges: [StrapiExhibitEdge!]!
    field: String!
    fieldValue: String
    nodes: [StrapiExhibit!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type StrapiFieldOfStudy implements Node {
    children: [Node!]!
    created_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    department: StrapiFieldOfStudyDepartment
    id: ID!
    internal: Internal!
    locale: String
    name: String
    parent: Node
    strapiId: Int
    updated_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
}

type StrapiFieldOfStudyConnection {
    distinct(field: StrapiFieldOfStudyFieldsEnum!): [String!]!
    edges: [StrapiFieldOfStudyEdge!]!
    group(field: StrapiFieldOfStudyFieldsEnum!, limit: Int, skip: Int): [StrapiFieldOfStudyGroupConnection!]!
    max(field: StrapiFieldOfStudyFieldsEnum!): Float
    min(field: StrapiFieldOfStudyFieldsEnum!): Float
    nodes: [StrapiFieldOfStudy!]!
    pageInfo: PageInfo!
    sum(field: StrapiFieldOfStudyFieldsEnum!): Float
    totalCount: Int!
}

type StrapiFieldOfStudyDepartment {
    created_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    description: String
    icon: String
    id: Int
    locale: String
    name: String
    published_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    theme: String
    updated_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
}

type StrapiFieldOfStudyEdge {
    next: StrapiFieldOfStudy
    node: StrapiFieldOfStudy!
    previous: StrapiFieldOfStudy
}

type StrapiFieldOfStudyGroupConnection {
    edges: [StrapiFieldOfStudyEdge!]!
    field: String!
    fieldValue: String
    nodes: [StrapiFieldOfStudy!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type StrapiFooter implements Node {
    children: [Node!]!
    contact: String
    created_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    id: ID!
    internal: Internal!
    locale: String
    more_info: String
    more_info_links: String
    parent: Node
    phone: String
    school_location: String
    school_name: String
    strapiId: Int
    updated_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
}

type StrapiFooterConnection {
    distinct(field: StrapiFooterFieldsEnum!): [String!]!
    edges: [StrapiFooterEdge!]!
    group(field: StrapiFooterFieldsEnum!, limit: Int, skip: Int): [StrapiFooterGroupConnection!]!
    max(field: StrapiFooterFieldsEnum!): Float
    min(field: StrapiFooterFieldsEnum!): Float
    nodes: [StrapiFooter!]!
    pageInfo: PageInfo!
    sum(field: StrapiFooterFieldsEnum!): Float
    totalCount: Int!
}

type StrapiFooterEdge {
    next: StrapiFooter
    node: StrapiFooter!
    previous: StrapiFooter
}

type StrapiFooterGroupConnection {
    edges: [StrapiFooterEdge!]!
    field: String!
    fieldValue: String
    nodes: [StrapiFooter!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type StrapiHome implements Node {
    children: [Node!]!
    content_banner_text: String
    created_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    description: String
    id: ID!
    internal: Internal!
    locale: String
    parent: Node
    strapiId: Int
    title: String
    title_banner_text: String
    updated_at(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
}

type StrapiHomeConnection {
    distinct(field: StrapiHomeFieldsEnum!): [String!]!
    edges: [StrapiHomeEdge!]!
    group(field: StrapiHomeFieldsEnum!, limit: Int, skip: Int): [StrapiHomeGroupConnection!]!
    max(field: StrapiHomeFieldsEnum!): Float
    min(field: StrapiHomeFieldsEnum!): Float
    nodes: [StrapiHome!]!
    pageInfo: PageInfo!
    sum(field: StrapiHomeFieldsEnum!): Float
    totalCount: Int!
}

type StrapiHomeEdge {
    next: StrapiHome
    node: StrapiHome!
    previous: StrapiHome
}

type StrapiHomeGroupConnection {
    edges: [StrapiHomeEdge!]!
    field: String!
    fieldValue: String
    nodes: [StrapiHome!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

enum DirectoryFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prettySize
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum FileFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    childImageSharp___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___gatsbyImageData @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children
    childrenImageSharp
    childrenImageSharp___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___gatsbyImageData @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___original___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___original___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___original___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prettySize
    publicURL
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum GatsbyImageFormat {
    AUTO
    AVIF
    JPG
    NO_CHANGE
    PNG
    WEBP
}

enum GatsbyImageLayout {
    CONSTRAINED
    FIXED
    FULL_WIDTH
}

enum GatsbyImagePlaceholder {
    BLURRED
    DOMINANT_COLOR
    NONE
    TRACED_SVG
}

enum ImageCropFocus {
    ATTENTION
    CENTER
    EAST
    ENTROPY
    NORTH
    NORTHEAST
    NORTHWEST
    SOUTH
    SOUTHEAST
    SOUTHWEST
    WEST
}

enum ImageFit {
    CONTAIN
    COVER
    FILL
    INSIDE
    OUTSIDE
}

enum ImageFormat {
    AUTO
    AVIF
    JPG
    NO_CHANGE
    PNG
    WEBP
}

enum ImageLayout {
    CONSTRAINED
    FIXED
    FULL_WIDTH
}

enum ImagePlaceholder {
    BLURRED
    DOMINANT_COLOR
    NONE
    TRACED_SVG
}

enum ImageSharpFieldsEnum {
    children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    gatsbyImageData @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
}

enum PotraceTurnPolicy {
    TURNPOLICY_BLACK
    TURNPOLICY_LEFT
    TURNPOLICY_MAJORITY
    TURNPOLICY_MINORITY
    TURNPOLICY_RIGHT
    TURNPOLICY_WHITE
}

enum SiteBuildMetadataFieldsEnum {
    buildTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
}

enum SiteFieldsEnum {
    buildTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    host
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pathPrefix
    polyfill
    port
    siteMetadata___author
    siteMetadata___description
    siteMetadata___siteUrl
    siteMetadata___title
}

enum SiteFunctionFieldsEnum {
    absoluteCompiledFilePath
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    functionRoute
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    matchPath
    originalAbsoluteFilePath
    originalRelativeFilePath
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pluginName
    relativeCompiledFilePath
}

enum SitePageFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    component
    componentChunkName
    context___id
    id
    internalComponentName
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    isCreatedByStatefulCreatePages
    matchPath
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    path
    pluginCreatorId
    pluginCreator___browserAPIs
    pluginCreator___children
    pluginCreator___children___children
    pluginCreator___children___children___children
    pluginCreator___children___children___id
    pluginCreator___children___id
    pluginCreator___children___internal___content
    pluginCreator___children___internal___contentDigest
    pluginCreator___children___internal___description
    pluginCreator___children___internal___fieldOwners
    pluginCreator___children___internal___ignoreType
    pluginCreator___children___internal___mediaType
    pluginCreator___children___internal___owner
    pluginCreator___children___internal___type
    pluginCreator___children___parent___children
    pluginCreator___children___parent___id
    pluginCreator___id
    pluginCreator___internal___content
    pluginCreator___internal___contentDigest
    pluginCreator___internal___description
    pluginCreator___internal___fieldOwners
    pluginCreator___internal___ignoreType
    pluginCreator___internal___mediaType
    pluginCreator___internal___owner
    pluginCreator___internal___type
    pluginCreator___name
    pluginCreator___nodeAPIs
    pluginCreator___packageJson___dependencies
    pluginCreator___packageJson___dependencies___name
    pluginCreator___packageJson___dependencies___version
    pluginCreator___packageJson___description
    pluginCreator___packageJson___devDependencies
    pluginCreator___packageJson___devDependencies___name
    pluginCreator___packageJson___devDependencies___version
    pluginCreator___packageJson___keywords
    pluginCreator___packageJson___license
    pluginCreator___packageJson___main
    pluginCreator___packageJson___name
    pluginCreator___packageJson___peerDependencies
    pluginCreator___packageJson___peerDependencies___name
    pluginCreator___packageJson___peerDependencies___version
    pluginCreator___packageJson___version
    pluginCreator___parent___children
    pluginCreator___parent___children___children
    pluginCreator___parent___children___id
    pluginCreator___parent___id
    pluginCreator___parent___internal___content
    pluginCreator___parent___internal___contentDigest
    pluginCreator___parent___internal___description
    pluginCreator___parent___internal___fieldOwners
    pluginCreator___parent___internal___ignoreType
    pluginCreator___parent___internal___mediaType
    pluginCreator___parent___internal___owner
    pluginCreator___parent___internal___type
    pluginCreator___parent___parent___children
    pluginCreator___parent___parent___id
    pluginCreator___pluginFilepath
    pluginCreator___pluginOptions___allExtensions
    pluginCreator___pluginOptions___apiURL
    pluginCreator___pluginOptions___background_color
    pluginCreator___pluginOptions___base64Width
    pluginCreator___pluginOptions___cacheDigest
    pluginCreator___pluginOptions___cache_busting_mode
    pluginCreator___pluginOptions___crossOrigin
    pluginCreator___pluginOptions___defaultQuality
    pluginCreator___pluginOptions___display
    pluginCreator___pluginOptions___failOnError
    pluginCreator___pluginOptions___icon
    pluginCreator___pluginOptions___include_favicon
    pluginCreator___pluginOptions___isTSX
    pluginCreator___pluginOptions___jsxPragma
    pluginCreator___pluginOptions___legacy
    pluginCreator___pluginOptions___name
    pluginCreator___pluginOptions___path
    pluginCreator___pluginOptions___pathCheck
    pluginCreator___pluginOptions___queryLimit
    pluginCreator___pluginOptions___short_name
    pluginCreator___pluginOptions___singleTypes
    pluginCreator___pluginOptions___start_url
    pluginCreator___pluginOptions___stripMetadata
    pluginCreator___pluginOptions___theme_color
    pluginCreator___pluginOptions___theme_color_in_head
    pluginCreator___resolve
    pluginCreator___ssrAPIs
    pluginCreator___version
}

enum SitePluginFieldsEnum {
    browserAPIs
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    name
    nodeAPIs
    packageJson___dependencies
    packageJson___dependencies___name
    packageJson___dependencies___version
    packageJson___description
    packageJson___devDependencies
    packageJson___devDependencies___name
    packageJson___devDependencies___version
    packageJson___keywords
    packageJson___license
    packageJson___main
    packageJson___name
    packageJson___peerDependencies
    packageJson___peerDependencies___name
    packageJson___peerDependencies___version
    packageJson___version
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pluginFilepath
    pluginOptions___allExtensions
    pluginOptions___apiURL
    pluginOptions___background_color
    pluginOptions___base64Width
    pluginOptions___cacheDigest
    pluginOptions___cache_busting_mode
    pluginOptions___crossOrigin
    pluginOptions___defaultQuality
    pluginOptions___display
    pluginOptions___failOnError
    pluginOptions___icon
    pluginOptions___include_favicon
    pluginOptions___isTSX
    pluginOptions___jsxPragma
    pluginOptions___legacy
    pluginOptions___name
    pluginOptions___path
    pluginOptions___pathCheck
    pluginOptions___queryLimit
    pluginOptions___short_name
    pluginOptions___singleTypes
    pluginOptions___start_url
    pluginOptions___stripMetadata
    pluginOptions___theme_color
    pluginOptions___theme_color_in_head
    resolve
    ssrAPIs
    version
}

enum SortOrderEnum {
    ASC
    DESC
}

enum StrapiAboutUsFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    created_at
    history_text_field
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    locale
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    strapiId
    title
    updated_at
}

enum StrapiBestDegreesFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    created_at
    description
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    locale
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    strapiId
    title
    updated_at
}

enum StrapiDegreeFieldsEnum {
    author
    best_degree
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    contacts
    contacts___contact
    contacts___id
    created_at
    description
    field_of_study___created_at
    field_of_study___department
    field_of_study___id
    field_of_study___locale
    field_of_study___name
    field_of_study___updated_at
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    locale
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    promoters
    promoters___id
    promoters___promoter_name
    promoters___subtitle
    promoters___title
    published_at
    strapiId
    title
    updated_at
    year
}

enum StrapiDepartmentFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    created_at
    description
    icon
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    locale
    name
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    published_at
    strapiId
    theme
    updated_at
}

enum StrapiExhibitFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    created_at
    description
    end_date
    exhibit_type
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    links
    locale
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    published_at
    start_date
    strapiId
    title
    updated_at
}

enum StrapiFieldOfStudyFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    created_at
    department___created_at
    department___description
    department___icon
    department___id
    department___locale
    department___name
    department___published_at
    department___theme
    department___updated_at
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    locale
    name
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    strapiId
    updated_at
}

enum StrapiFooterFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    contact
    created_at
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    locale
    more_info
    more_info_links
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    phone
    school_location
    school_name
    strapiId
    updated_at
}

enum StrapiHomeFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    content_banner_text
    created_at
    description
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    locale
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    strapiId
    title
    title_banner_text
    updated_at
}

input AVIFOptions {
    lossless: Boolean
    quality: Int
    speed: Int
}

input BlurredOptions {
    "Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this"
    toFormat: ImageFormat
    "Width of the generated low-res preview. Default is 20px"
    width: Int
}

input BooleanQueryOperatorInput {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input DateQueryOperatorInput {
    eq: Date
    gt: Date
    gte: Date
    in: [Date]
    lt: Date
    lte: Date
    ne: Date
    nin: [Date]
}

input DirectoryFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    changeTime: DateQueryOperatorInput
    children: NodeFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: FloatQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
}

input DirectorySortInput {
    fields: [DirectoryFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
    highlight: String!
    opacity: Int
    shadow: String!
}

input FileFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    changeTime: DateQueryOperatorInput
    childImageSharp: ImageSharpFilterInput
    children: NodeFilterListInput
    childrenImageSharp: ImageSharpFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: FloatQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    publicURL: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
}

input FileSortInput {
    fields: [FileFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input ImageSharpFilterInput {
    children: NodeFilterListInput
    fixed: ImageSharpFixedFilterInput
    fluid: ImageSharpFluidFilterInput
    gatsbyImageData: JSONQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    original: ImageSharpOriginalFilterInput
    parent: NodeFilterInput
    resize: ImageSharpResizeFilterInput
}

input ImageSharpFilterListInput {
    elemMatch: ImageSharpFilterInput
}

input ImageSharpFixedFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    height: FloatQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpFluidFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    originalImg: StringQueryOperatorInput
    originalName: StringQueryOperatorInput
    presentationHeight: IntQueryOperatorInput
    presentationWidth: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input ImageSharpOriginalFilterInput {
    height: FloatQueryOperatorInput
    src: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpResizeFilterInput {
    aspectRatio: FloatQueryOperatorInput
    height: IntQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: IntQueryOperatorInput
}

input ImageSharpSortInput {
    fields: [ImageSharpFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input IntQueryOperatorInput {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input InternalFilterInput {
    content: StringQueryOperatorInput
    contentDigest: StringQueryOperatorInput
    description: StringQueryOperatorInput
    fieldOwners: StringQueryOperatorInput
    ignoreType: BooleanQueryOperatorInput
    mediaType: StringQueryOperatorInput
    owner: StringQueryOperatorInput
    type: StringQueryOperatorInput
}

input JPGOptions {
    progressive: Boolean = true
    quality: Int
}

input JSONQueryOperatorInput {
    eq: JSON
    glob: JSON
    in: [JSON]
    ne: JSON
    nin: [JSON]
    regex: JSON
}

input NodeFilterInput {
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input NodeFilterListInput {
    elemMatch: NodeFilterInput
}

input PNGOptions {
    compressionSpeed: Int = 4
    quality: Int
}

input Potrace {
    alphaMax: Float
    background: String
    blackOnWhite: Boolean
    color: String
    optCurve: Boolean
    optTolerance: Float
    threshold: Int
    turdSize: Float
    turnPolicy: PotraceTurnPolicy
}

input SiteBuildMetadataFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input SiteBuildMetadataSortInput {
    fields: [SiteBuildMetadataFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    host: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    pathPrefix: StringQueryOperatorInput
    polyfill: BooleanQueryOperatorInput
    port: IntQueryOperatorInput
    siteMetadata: SiteSiteMetadataFilterInput
}

input SiteFunctionFilterInput {
    absoluteCompiledFilePath: StringQueryOperatorInput
    children: NodeFilterListInput
    functionRoute: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    matchPath: StringQueryOperatorInput
    originalAbsoluteFilePath: StringQueryOperatorInput
    originalRelativeFilePath: StringQueryOperatorInput
    parent: NodeFilterInput
    pluginName: StringQueryOperatorInput
    relativeCompiledFilePath: StringQueryOperatorInput
}

input SiteFunctionSortInput {
    fields: [SiteFunctionFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SitePageContextFilterInput {
    id: IntQueryOperatorInput
}

input SitePageFilterInput {
    children: NodeFilterListInput
    component: StringQueryOperatorInput
    componentChunkName: StringQueryOperatorInput
    context: SitePageContextFilterInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    internalComponentName: StringQueryOperatorInput
    isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
    matchPath: StringQueryOperatorInput
    parent: NodeFilterInput
    path: StringQueryOperatorInput
    pluginCreator: SitePluginFilterInput
    pluginCreatorId: StringQueryOperatorInput
}

input SitePageSortInput {
    fields: [SitePageFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SitePluginFilterInput {
    browserAPIs: StringQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    name: StringQueryOperatorInput
    nodeAPIs: StringQueryOperatorInput
    packageJson: SitePluginPackageJsonFilterInput
    parent: NodeFilterInput
    pluginFilepath: StringQueryOperatorInput
    pluginOptions: SitePluginPluginOptionsFilterInput
    resolve: StringQueryOperatorInput
    ssrAPIs: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

input SitePluginPackageJsonDevDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonFilterInput {
    dependencies: SitePluginPackageJsonDependenciesFilterListInput
    description: StringQueryOperatorInput
    devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput
    keywords: StringQueryOperatorInput
    license: StringQueryOperatorInput
    main: StringQueryOperatorInput
    name: StringQueryOperatorInput
    peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

input SitePluginPluginOptionsFilterInput {
    allExtensions: BooleanQueryOperatorInput
    apiURL: StringQueryOperatorInput
    background_color: StringQueryOperatorInput
    base64Width: IntQueryOperatorInput
    cacheDigest: StringQueryOperatorInput
    cache_busting_mode: StringQueryOperatorInput
    crossOrigin: StringQueryOperatorInput
    defaultQuality: IntQueryOperatorInput
    display: StringQueryOperatorInput
    failOnError: BooleanQueryOperatorInput
    icon: StringQueryOperatorInput
    include_favicon: BooleanQueryOperatorInput
    isTSX: BooleanQueryOperatorInput
    jsxPragma: StringQueryOperatorInput
    legacy: BooleanQueryOperatorInput
    name: StringQueryOperatorInput
    path: StringQueryOperatorInput
    pathCheck: BooleanQueryOperatorInput
    queryLimit: IntQueryOperatorInput
    short_name: StringQueryOperatorInput
    singleTypes: StringQueryOperatorInput
    start_url: StringQueryOperatorInput
    stripMetadata: BooleanQueryOperatorInput
    theme_color: StringQueryOperatorInput
    theme_color_in_head: BooleanQueryOperatorInput
}

input SitePluginSortInput {
    fields: [SitePluginFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteSiteMetadataFilterInput {
    author: StringQueryOperatorInput
    description: StringQueryOperatorInput
    siteUrl: StringQueryOperatorInput
    title: StringQueryOperatorInput
}

input SiteSortInput {
    fields: [SiteFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StrapiAboutUsFilterInput {
    children: NodeFilterListInput
    created_at: DateQueryOperatorInput
    history_text_field: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    locale: StringQueryOperatorInput
    parent: NodeFilterInput
    strapiId: IntQueryOperatorInput
    title: StringQueryOperatorInput
    updated_at: DateQueryOperatorInput
}

input StrapiAboutUsSortInput {
    fields: [StrapiAboutUsFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StrapiBestDegreesFilterInput {
    children: NodeFilterListInput
    created_at: DateQueryOperatorInput
    description: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    locale: StringQueryOperatorInput
    parent: NodeFilterInput
    strapiId: IntQueryOperatorInput
    title: StringQueryOperatorInput
    updated_at: DateQueryOperatorInput
}

input StrapiBestDegreesSortInput {
    fields: [StrapiBestDegreesFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StrapiDegreeContactsFilterInput {
    contact: StringQueryOperatorInput
    id: IntQueryOperatorInput
}

input StrapiDegreeContactsFilterListInput {
    elemMatch: StrapiDegreeContactsFilterInput
}

input StrapiDegreeField_of_studyFilterInput {
    created_at: DateQueryOperatorInput
    department: IntQueryOperatorInput
    id: IntQueryOperatorInput
    locale: StringQueryOperatorInput
    name: StringQueryOperatorInput
    updated_at: DateQueryOperatorInput
}

input StrapiDegreeFilterInput {
    author: StringQueryOperatorInput
    best_degree: BooleanQueryOperatorInput
    children: NodeFilterListInput
    contacts: StrapiDegreeContactsFilterListInput
    created_at: DateQueryOperatorInput
    description: StringQueryOperatorInput
    field_of_study: StrapiDegreeField_of_studyFilterInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    locale: StringQueryOperatorInput
    parent: NodeFilterInput
    promoters: StrapiDegreePromotersFilterListInput
    published_at: DateQueryOperatorInput
    strapiId: IntQueryOperatorInput
    title: StringQueryOperatorInput
    updated_at: DateQueryOperatorInput
    year: IntQueryOperatorInput
}

input StrapiDegreePromotersFilterInput {
    id: IntQueryOperatorInput
    promoter_name: StringQueryOperatorInput
    subtitle: StringQueryOperatorInput
    title: StringQueryOperatorInput
}

input StrapiDegreePromotersFilterListInput {
    elemMatch: StrapiDegreePromotersFilterInput
}

input StrapiDegreeSortInput {
    fields: [StrapiDegreeFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StrapiDepartmentFilterInput {
    children: NodeFilterListInput
    created_at: DateQueryOperatorInput
    description: StringQueryOperatorInput
    icon: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    locale: StringQueryOperatorInput
    name: StringQueryOperatorInput
    parent: NodeFilterInput
    published_at: DateQueryOperatorInput
    strapiId: IntQueryOperatorInput
    theme: StringQueryOperatorInput
    updated_at: DateQueryOperatorInput
}

input StrapiDepartmentSortInput {
    fields: [StrapiDepartmentFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StrapiExhibitFilterInput {
    children: NodeFilterListInput
    created_at: DateQueryOperatorInput
    description: StringQueryOperatorInput
    end_date: DateQueryOperatorInput
    exhibit_type: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    links: StringQueryOperatorInput
    locale: StringQueryOperatorInput
    parent: NodeFilterInput
    published_at: DateQueryOperatorInput
    start_date: DateQueryOperatorInput
    strapiId: IntQueryOperatorInput
    title: StringQueryOperatorInput
    updated_at: DateQueryOperatorInput
}

input StrapiExhibitSortInput {
    fields: [StrapiExhibitFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StrapiFieldOfStudyDepartmentFilterInput {
    created_at: DateQueryOperatorInput
    description: StringQueryOperatorInput
    icon: StringQueryOperatorInput
    id: IntQueryOperatorInput
    locale: StringQueryOperatorInput
    name: StringQueryOperatorInput
    published_at: DateQueryOperatorInput
    theme: StringQueryOperatorInput
    updated_at: DateQueryOperatorInput
}

input StrapiFieldOfStudyFilterInput {
    children: NodeFilterListInput
    created_at: DateQueryOperatorInput
    department: StrapiFieldOfStudyDepartmentFilterInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    locale: StringQueryOperatorInput
    name: StringQueryOperatorInput
    parent: NodeFilterInput
    strapiId: IntQueryOperatorInput
    updated_at: DateQueryOperatorInput
}

input StrapiFieldOfStudySortInput {
    fields: [StrapiFieldOfStudyFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StrapiFooterFilterInput {
    children: NodeFilterListInput
    contact: StringQueryOperatorInput
    created_at: DateQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    locale: StringQueryOperatorInput
    more_info: StringQueryOperatorInput
    more_info_links: StringQueryOperatorInput
    parent: NodeFilterInput
    phone: StringQueryOperatorInput
    school_location: StringQueryOperatorInput
    school_name: StringQueryOperatorInput
    strapiId: IntQueryOperatorInput
    updated_at: DateQueryOperatorInput
}

input StrapiFooterSortInput {
    fields: [StrapiFooterFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StrapiHomeFilterInput {
    children: NodeFilterListInput
    content_banner_text: StringQueryOperatorInput
    created_at: DateQueryOperatorInput
    description: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    locale: StringQueryOperatorInput
    parent: NodeFilterInput
    strapiId: IntQueryOperatorInput
    title: StringQueryOperatorInput
    title_banner_text: StringQueryOperatorInput
    updated_at: DateQueryOperatorInput
}

input StrapiHomeSortInput {
    fields: [StrapiHomeFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StringQueryOperatorInput {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input TransformOptions {
    cropFocus: ImageCropFocus = ATTENTION
    duotone: DuotoneGradient
    fit: ImageFit = COVER
    grayscale: Boolean = false
    rotate: Int = 0
    trim: Float = 0.0
}

input WebPOptions {
    quality: Int
}


"A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON